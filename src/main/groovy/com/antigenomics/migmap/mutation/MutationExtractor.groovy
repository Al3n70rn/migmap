/*
 * Copyright (c) 2015, Bolotin Dmitry, Chudakov Dmitry, Shugay Mikhail
 * (here and after addressed as Inventors)
 * All Rights Reserved
 *
 * Permission to use, copy, modify and distribute any part of this program for
 * educational, research and non-profit purposes, by non-profit institutions
 * only, without fee, and without a written agreement is hereby granted,
 * provided that the above copyright notice, this paragraph and the following
 * three paragraphs appear in all copies.
 *
 * Those desiring to incorporate this work into commercial products or use for
 * commercial purposes should contact the Inventors using one of the following
 * email addresses: chudakovdm@mail.ru, chudakovdm@gmail.com
 *
 * IN NO EVENT SHALL THE INVENTORS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
 * SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
 * ARISING OUT OF THE USE OF THIS SOFTWARE, EVEN IF THE INVENTORS HAS BEEN
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE SOFTWARE PROVIDED HEREIN IS ON AN "AS IS" BASIS, AND THE INVENTORS HAS
 * NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
 * MODIFICATIONS. THE INVENTORS MAKES NO REPRESENTATIONS AND EXTENDS NO
 * WARRANTIES OF ANY KIND, EITHER IMPLIED OR EXPRESS, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A
 * PARTICULAR PURPOSE, OR THAT THE USE OF THE SOFTWARE WILL NOT INFRINGE ANY
 * PATENT, TRADEMARK OR OTHER RIGHTS.
 */

package com.antigenomics.migmap.mutation

import com.antigenomics.migmap.Util
import com.antigenomics.migmap.blast.Alignment
import com.antigenomics.migmap.genomic.Segment
import com.antigenomics.migmap.mapping.RegionMarkup

import static com.antigenomics.migmap.mutation.MutationType.Deletion
import static com.antigenomics.migmap.mutation.MutationType.None

class MutationExtractor {
    final List<Mutation> mutations
    final int offset

    MutationExtractor(Segment segment,
                      Alignment alignment,
                      RegionMarkup regionMarkup) {
        def vResult = extract(alignment)

        vResult.mutations.each {
            it.parent = segment
            it.subRegion = regionMarkup.getSubRegion(it)
        }

        // This will be used later to recompute J and D mutations to V segment germline coords
        // First two terms are difference between read and germline coordinates, second two are
        // offset generated by indels

        // 0000000000111   11111112222222222
        // 0123456789012   34567890123456789
        // ______.......---........_____.... s
        //      _.............--..._____.... q
        //      00000000001111  111111222222
        //      01234567890123  456789012345
        //
        // sstart = 6
        // qstart = 1
        // sdelta = 3
        // qdelta = 2
        //
        //
        // 22 + x = 26
        //
        // offset = sstart - qstart = 5
        //
        // 22 + offset(5) - sdelta(3) + qdelta(2) = 26

        this.offset = alignment.sstart - alignment.qstart - vResult.sDelta + vResult.qDelta

        this.mutations = vResult.mutations
    }

    static MutationExtractorResult extract(Alignment alignment) {
        def mutations = new ArrayList<Mutation>()
        int start = -1, end = -1
        int qdelta = 0, sdelta = 0
        def type = None

        def writeMutation = {
            if (type != None) {
                mutations.add(new Mutation(
                        type,
                        start + alignment.sstart - sdelta, end + alignment.sstart - sdelta,
                        start + alignment.qstart - qdelta, end + alignment.qstart - qdelta,
                        alignment.sseq[start..<end], alignment.qseq[start..<end])
                )
            }
        }

        for (int i = 0; i < alignment.qseq.length(); i++) {
            char q = alignment.qseq.charAt(i), s = alignment.sseq.charAt(i)

            if (q == Util.GAP) {
                if (type != Deletion) {
                    writeMutation()
                    type = Deletion
                    start = i
                    end = i + 1
                } else {
                    end++
                }

                qdelta++
            } else if (s == Util.GAP) {
                if (type != MutationType.Insertion) {
                    writeMutation()
                    type = MutationType.Insertion
                    start = i
                    end = i + 1
                } else {
                    end++
                }

                sdelta++
            } else if (s != q) {
                // We store substitutions one-by-one
                // This is to facilitate post analysis (perhaps should be changed)
                if (type != MutationType.Substitution) {
                    writeMutation()
                }
                type = MutationType.Substitution
                start = i
                end = i + 1
                writeMutation()
                type = None
            } else {
                // no mutation here, flush
                writeMutation()
                type = None
            }
        }

        // flush last
        writeMutation()

        new MutationExtractorResult(mutations, qdelta, sdelta)
    }

    void extractJ(Segment segment,
                  Alignment alignment) {
        extract(alignment).mutations.each {
            it.parent = segment
            it.subRegion = (it.start > segment.referencePoint + 3) ? SubRegion.FR4 : SubRegion.CDR3
            it.start = it.startInRead + offset
            it.end = it.endInRead + offset
            this.mutations.add(it)
        }
    }

    void extractD(Segment segment,
                  Alignment alignment) {
        extract(alignment).mutations.each {
            it.parent = segment
            it.subRegion = SubRegion.CDR3
            it.start = it.startInRead + offset
            it.end = it.endInRead + offset
            this.mutations.add(it)
        }
    }

    static class MutationExtractorResult {
        final List<Mutation> mutations
        final int qDelta, sDelta

        MutationExtractorResult(List<Mutation> mutations, int qDelta, int sDelta) {
            this.mutations = mutations
            this.qDelta = qDelta
            this.sDelta = sDelta
        }
    }
}
